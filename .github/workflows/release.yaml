---
name: "Angreal Release"

on:  # yamllint disable-line rule:truthy
  release:
    types: [published]
  push:
    branches:
      - build**
      - cicd-*
      - cicd/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  macos-x86_64:
    runs-on: macos-latest
    strategy:
      matrix:
        python_version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --sdist -i ${{ matrix.python_version }}
      - name: Install built wheel - x86_64
        run: |
          pip install packaging pytest angreal --find-links dist --force-reinstall
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-x86_64-py${{ matrix.python_version }}
          path: dist
          overwrite: true

  macos-universal:
    runs-on: macos-latest
    strategy:
      matrix:
        python_version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          args: --release --target universal2-apple-darwin --out dist -i ${{ matrix.python_version }}
      - name: Install built wheel - universal2
        run: |
          pip install packaging pytest angreal --find-links dist --force-reinstall
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-universal2-py${{ matrix.python_version }}
          path: dist
          overwrite: true

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python_version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x64
          args: --release --out dist -i ${{ matrix.python_version }}
      - name: Install built wheel
        run: |
          pip install packaging pytest angreal --find-links dist --force-reinstall
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-x64-py${{ matrix.python_version }}
          path: dist
          overwrite: true

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
        python_version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.target == 'x86_64' && 'x64' || 'x86' }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist -i ${{ matrix.python_version }}
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install packaging pytest angreal --find-links dist --force-reinstall
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}-py${{ matrix.python_version }}
          path: dist
          overwrite: true

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64, armv7, s390x, ppc64le]
        python_version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist -i ${{ matrix.python_version }}
      - uses: uraimo/run-on-arch-action@v2
        if: matrix.target != 'ppc64'
        name: Install built wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip python3-venv git
            pip3 install -U pip pytest packaging
          run: |
            pip3 install packaging pytest angreal --find-links dist --force-reinstall
            pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-cross-${{ matrix.target }}-py${{ matrix.python_version }}
          path: dist
          overwrite: true

  musllinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl, i686-unknown-linux-musl]
        python_version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.target == 'x86_64-unknown-linux-musl' && 'x64' || 'x86' }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: --release --out dist -i ${{ matrix.python_version }}
      - name: Install built wheel
        if: matrix.target == 'x86_64-unknown-linux-musl'
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            apk add py3-pip
            python3 -m venv .venv
            . .venv/bin/activate
            pip3 install pip pytest packaging
            pip3 install packaging pytest angreal --find-links /io/dist --force-reinstall
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.target }}-py${{ matrix.python_version }}
          path: dist
          overwrite: true

  musllinux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - target: aarch64-unknown-linux-musl
            arch: aarch64
          - target: armv7-unknown-linux-musleabihf
            arch: armv7
        python_version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: ${{ matrix.platform.target }}
          manylinux: musllinux_1_2
          args: --release --out dist -i ${{ matrix.python_version }}
      - uses: uraimo/run-on-arch-action@v2
        name: Install built wheel
        with:
          arch: ${{ matrix.platform.arch }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          install: |
            apk add py3-pip
          run: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip3 install -U pip pytest
            pip3 install packaging pytest angreal --find-links dist --force-reinstall
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-cross-${{ matrix.platform.arch }}-py${{ matrix.python_version }}
          path: dist
          overwrite: true

  release-pypi:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs:
      - macos-universal
      - macos-x86_64
      - windows
      - linux
      - linux-cross
      - musllinux
      - musllinux-cross
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Download and combine artifacts
        run: |
          mkdir -p dist

          # Define all artifact names
          ARTIFACTS=()
          for platform in macos windows linux musllinux; do
            for arch in x86_64 universal2 x64 i686 aarch64 armv7 s390x ppc64le; do
              for pyver in 3.9 3.10 3.11 3.12 3.13; do
                ARTIFACTS+=("wheels-$platform-$arch-py$pyver")
              done
            done
          done

          # Download and combine each artifact
          for artifact in "${ARTIFACTS[@]}"; do
            if [ -d "$artifact" ]; then
              cp -r "$artifact"/* dist/
            fi
          done

          # Verify we have the expected number of wheels
          WHEEL_COUNT=$(find dist -name "*.whl" | wc -l)
          echo "Found $WHEEL_COUNT wheels"
          if [ "$WHEEL_COUNT" -eq 0 ]; then
            echo "No wheels found!"
            exit 1
          fi

      - name: Test upload to TestPyPI
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --repository-url https://test.pypi.org/legacy/ --skip-existing dist/*

      - name: Publish to PyPI
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing dist/*

  release-cargo:
    name: Release to Cargo
    runs-on: ubuntu-latest
    needs:
      - macos-universal
      - macos-x86_64
      - windows
      - linux
      - linux-cross
      - musllinux
      - musllinux-cross
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
