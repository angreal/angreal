---
name: "Angreal Release"

on:  # yamllint disable-line rule:truthy
  release:
    types: [published]
  push:
    branches:
      - build**
      - cicd-*
      - cicd/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build (${{ matrix.platform.name }} - ${{ matrix.arch }} - Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - name: macos
            runner: macos-latest
            target: x86_64
            args: --release --out dist --sdist
          - name: macos
            runner: macos-latest
            target: universal2-apple-darwin
            args: --release --target universal2-apple-darwin --out dist
          - name: windows
            runner: windows-latest
            target: x64
            args: --release --out dist
          - name: linux
            runner: ubuntu-latest
            target: x86_64
            args: --release --out dist
          - name: linux
            runner: ubuntu-latest
            target: i686
            args: --release --out dist
          - name: linux-cross
            runner: ubuntu-latest
            target: aarch64
            args: --release --out dist
          - name: linux-cross
            runner: ubuntu-latest
            target: armv7
            args: --release --out dist
          - name: linux-cross
            runner: ubuntu-latest
            target: s390x
            args: --release --out dist
          - name: linux-cross
            runner: ubuntu-latest
            target: ppc64le
            args: --release --out dist
          - name: musllinux
            runner: ubuntu-latest
            target: x86_64-unknown-linux-musl
            args: --release --out dist
          - name: musllinux
            runner: ubuntu-latest
            target: i686-unknown-linux-musl
            args: --release --out dist
          - name: musllinux-cross
            runner: ubuntu-latest
            target: aarch64-unknown-linux-musl
            args: --release --out dist
          - name: musllinux-cross
            runner: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            args: --release --out dist
        python_version: [3.9, 3.10, 3.11, 3.12, 3.13]
        include:
          - platform: macos
            arch: x86_64
            python_arch: x64
          - platform: macos
            arch: universal2
            python_arch: x64
          - platform: windows
            arch: x64
            python_arch: x64
          - platform: linux
            arch: x86_64
            python_arch: x64
          - platform: linux
            arch: i686
            python_arch: x86
          - platform: linux-cross
            arch: aarch64
            python_arch: aarch64
          - platform: linux-cross
            arch: armv7
            python_arch: armv7
          - platform: linux-cross
            arch: s390x
            python_arch: s390x
          - platform: linux-cross
            arch: ppc64le
            python_arch: ppc64le
          - platform: musllinux
            arch: x86_64
            python_arch: x64
          - platform: musllinux
            arch: i686
            python_arch: x86
          - platform: musllinux-cross
            arch: aarch64
            python_arch: aarch64
          - platform: musllinux-cross
            arch: armv7
            python_arch: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.python_arch }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: ${{ matrix.platform.args }} -i ${{ matrix.python_version }}
      - name: Install and test wheel
        if: >-
          ${{ matrix.platform.name == 'macos' }} ||
          ${{ matrix.platform.name == 'linux' && matrix.arch == 'x86_64' }} ||
          ${{ matrix.platform.name == 'musllinux' && matrix.arch == 'x86_64' }}
        run: |
          pip install packaging pytest angreal --find-links dist --force-reinstall
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.name }}-${{ matrix.arch }}-py${{ matrix.python_version }}
          path: dist
          overwrite: true

  release-pypi:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Download and combine artifacts
        run: |
          mkdir -p dist

          # Define all artifact names
          ARTIFACTS=()
          for platform in macos windows linux musllinux; do
            for arch in x86_64 universal2 x64 i686 aarch64 armv7 s390x ppc64le; do
              for pyver in 3.9 3.10 3.11 3.12 3.13; do
                ARTIFACTS+=("wheels-$platform-$arch-py$pyver")
              done
            done
          done

          # Download and combine each artifact
          for artifact in "${ARTIFACTS[@]}"; do
            if [ -d "$artifact" ]; then
              cp -r "$artifact"/* dist/
            fi
          done

          # Verify we have the expected number of wheels
          WHEEL_COUNT=$(find dist -name "*.whl" | wc -l)
          echo "Found $WHEEL_COUNT wheels"
          if [ "$WHEEL_COUNT" -eq 0 ]; then
            echo "No wheels found!"
            exit 1
          fi

      - name: Test upload to TestPyPI
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --repository-url https://test.pypi.org/legacy/ --skip-existing dist/*

      - name: Publish to PyPI
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing dist/*

  release-cargo:
    name: Release to Cargo
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
