---
name: "Angreal Release"

on:  # yamllint disable-line rule:truthy
  release:
    types: [published]
  push:
    branches:
      - build**
      - cicd-*
      - cicd/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  macos-x86_64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
      - name: Install UV manually
        run: curl -LsSf https://astral.sh/uv/install.sh | sh && export PATH="$HOME/.local/bin:$PATH"
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --sdist -i 3.9 3.10 3.11 3.12 3.13 --manifest-path crates/angreal/Cargo.toml
      - name: Install built wheel - x86_64
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          pip install packaging pytest angreal --find-links dist --force-reinstall
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-x86_64
          path: dist
          overwrite: true

  macos-universal:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
      - name: Install UV manually
        run: curl -LsSf https://astral.sh/uv/install.sh | sh && export PATH="$HOME/.local/bin:$PATH"
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          args: --release --target universal2-apple-darwin --out dist -i 3.9 3.10 3.11 3.12 3.13 --manifest-path crates/angreal/Cargo.toml
      - name: Install built wheel - universal2
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          pip install packaging pytest angreal --find-links dist --force-reinstall
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-universal
          path: dist
          overwrite: true

  windows:
    runs-on: windows-latest
    name: windows (${{ matrix.platform.target }})
    strategy:
      matrix:
        platform:
          - target: x64
            interpreter: 3.9 3.10 3.11 3.12 3.13
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          architecture: ${{ matrix.platform.target }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Set PowerShell execution policy
        run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
      - name: Install UV manually
        run: |
          irm https://astral.sh/uv/install.ps1 | iex
          $env:PATH = "$env:USERPROFILE\.local\bin;$env:PATH"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i ${{ matrix.platform.interpreter }} --manifest-path crates/angreal/Cargo.toml
      - name: Install built wheel
        run: |
          # Add UV to PATH if it exists
          $env:PATH = "$env:USERPROFILE\.local\bin;$env:USERPROFILE\.cargo\bin;$env:PATH"
          # Verify UV installation
          try { uv --version; Write-Host "UV found: $(uv --version)" } catch { Write-Host "UV not found in PATH" }
          pip install packaging pytest angreal --find-links dist --force-reinstall
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist
          overwrite: true
  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: x86_64
          manylinux: auto
          args: --release --out dist -i 3.9 3.10 3.11 3.12 3.13 --manifest-path crates/angreal/Cargo.toml
      - name: Install built wheel
        run: |
          pip install packaging pytest angreal --find-links dist --force-reinstall
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: dist
          overwrite: true
  release-pypi:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs:
      - macos-universal
      - macos-x86_64
      - windows
      - linux
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing dist/*
          twine upload --skip-existing *


  test-pypi:
    name: Upload to Test PyPI
    runs-on: ubuntu-latest
    needs:
      - macos-universal
      - macos-x86_64
      - windows
      - linux
    if: |
      startsWith(github.ref, 'refs/heads/cicd/') ||
      startsWith(github.ref, 'refs/heads/build') ||
      startsWith(github.ref, 'refs/heads/cicd-')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing --repository testpypi dist/*

  release-cargo:
    name: Release to Cargo
    runs-on: ubuntu-latest
    needs:
      - macos-universal
      - macos-x86_64
      - windows
      - linux
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          path: './crates/angreal'
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          path: './crates/angreal-mcp'
