---
name: "Angreal Tests"

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
      - master
      - 'cicd-*/**'  # Special trigger for CI/CD testing branches


concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: full
  RUST_VERSION: "1.75.0"  # Latest stable Rust version
  # Control production uploads based on branch
  IS_CICD_BRANCH: ${{ startsWith(github.ref, 'refs/heads/cicd/') }}
  # Use test repositories for cicd branches
  CARGO_REGISTRY: ${{ startsWith(github.ref, 'refs/heads/cicd/') && 'test-crates-io' || 'crates-io' }}
  PYPI_REPOSITORY: ${{ startsWith(github.ref, 'refs/heads/cicd/') && 'testpypi' || 'pypi' }}

jobs:

  pre-commit:
    name: "Linters"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files

  build-verification:
    name: "Build Verify"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo build --all

  smoke-test:
    name: "Functional Tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install maturin pytest
      - run: maturin build
      - run: pip install .
      - run: angreal --version
      - run: rm -rf .angreal
      - run: angreal init --force --defaults angreal_test_template
      - run: angreal init --force --values tests/common/test_assets/values.toml angreal_test_template

  unit-tests-linux:
    name: "Linux Unit Tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install maturin pytest
      - run: maturin build
      - run: pip install .
      - run: angreal test unit rust
      - run: angreal test unit python
      - run: angreal --version
      - run: rm -rf .angreal && angreal init --force --defaults angreal_test_template

  integration-tests-linux:
    name: "Linux Integration Tests"
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [unit-tests-linux]
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install maturin pytest
      - run: maturin build
      - run: pip install .
      - run: angreal test integration rust
      - run: rm -rf .angreal && angreal init --force --defaults angreal_test_template

  unit-tests-windows:
    name: "Windows Unit Tests"
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install maturin pytest
      - run: maturin build
      - run: pip install .
      - run: angreal test unit rust
      - run: angreal test unit python
      - run: angreal --version

  integration-tests-windows:
    name: "Windows Integration Tests"
    runs-on: windows-latest
    continue-on-error: true
    needs: [unit-tests-windows]
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install maturin pytest
      - run: maturin build
      - run: pip install .
      - run: angreal test integration rust

  unit-tests-macosx:
    name: "OSX Unit Tests"
    runs-on: macos-13
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install maturin pytest
      - run: maturin build
      - run: pip install .
      - run: angreal test unit rust
      - run: angreal test unit python
      - run: angreal --version
      - run: rm -rf .angreal && angreal init --force --defaults angreal_test_template

  integration-tests-macosx:
    name: "OSX Integration Tests"
    runs-on: macos-13
    continue-on-error: true
    needs: [unit-tests-macosx]
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install maturin pytest
      - run: maturin build
      - run: pip install .
      - run: angreal test integration rust
      - run: rm -rf .angreal && angreal init --force --defaults angreal_test_template

  test-upload:
    name: "Test Upload"
    needs: [build-verification, smoke-test, unit-tests-linux, unit-tests-windows, unit-tests-macosx]
    runs-on: ubuntu-latest
    if: ${{ !failure() }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Configure Cargo for Test Upload
        run: |
          cargo login ${{ secrets.CARGO_TEST_TOKEN }}
          echo "CARGO_REGISTRY=test-crates-io" >> $GITHUB_ENV
      - name: Configure PyPI for Test Upload
        run: |
          echo "[testpypi]" > ~/.pypirc
          echo "username = __token__" >> ~/.pypirc
          echo "password = ${{ secrets.PYPI_TEST_TOKEN }}" >> ~/.pypirc
      - name: Build and Upload to Test Repositories
        run: |
          # Build and upload to test-crates-io
          cargo publish --registry test-crates-io

          # Build and upload to testpypi
          maturin build
          pip install twine
          twine upload --repository testpypi target/wheels/*

  production-upload:
    name: "Production Upload"
    needs: [test-upload]
    runs-on: ubuntu-latest
    if: ${{ !failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Configure Cargo for Production Upload
        run: |
          cargo login ${{ secrets.CARGO_TOKEN }}
          echo "CARGO_REGISTRY=crates-io" >> $GITHUB_ENV
      - name: Configure PyPI for Production Upload
        run: |
          echo "[pypi]" > ~/.pypirc
          echo "username = __token__" >> ~/.pypirc
          echo "password = ${{ secrets.PYPI_TOKEN }}" >> ~/.pypirc
      - name: Build and Upload to Production Repositories
        run: |
          # Build and upload to crates-io
          cargo publish

          # Build and upload to pypi
          maturin build
          pip install twine
          twine upload target/wheels/*

  typos:
    name: "Spell Checks"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4
      - name: Spell Check
        uses: crate-ci/typos@v1.16.26
        with:
          files: ./src
      - name: Spell Check
        uses: crate-ci/typos@v1.16.26
        with:
          files: ./docs/content
      - name: Spell Check
        uses: crate-ci/typos@v1.16.26
        with:
          files: ./python
      - name: Spell Check
        uses: crate-ci/typos@v1.16.26
        with:
          files: ./py_tests
      - name: Spell Check
        uses: crate-ci/typos@v1.16.26
        with:
          files: ./tests
