image: python:3.6

# before_script:
#   - echo $HOME
#   - VERSION=`cat angreal/VERSION`
#   - pip install virtualenv
#   - virtualenv ~/.venv/angreal
#   - source ~/.venv/angreal/bin/activate
#   - pip install .[dev]


stages:
  - test
  # - pre_release
  # - release
  # - post_release
  # - pages


unit-test:
  image: ubuntu:20.04
  script:
    - apt-get update -qq && DEBIAN_FRONTEND=noninteractive apt-get install -y -qq --no-install-recommends python3 python3-pip python3-virtualenv cargo pkg-config libssl-dev python3-dev
    - virtualenv --seeder=pip --download /venv; source /venv/bin/activate
    - pip install maturin
    - maturin develop  
    - angreal test
  


# release-test:
#   image: python:3.6
#   stage: release
#   script:
#     - pip install twine
#     - echo "[distutils]" >> ~/.pypirc
#     - echo "index-servers=" >> ~/.pypirc
#     - echo "  testpypi" >> ~/.pypirc
#     - echo "[testpypi]" >> ~/.pypirc
#     - echo 'repository=https://test.pypi.org/legacy/' >> ~/.pypirc
#     - echo 'username='$PYPI_USER >> ~/.pypirc
#     - echo 'password='$PYPI_PASSWORD >> ~/.pypirc
#     - python setup.py check sdist bdist_wheel
#     - twine upload --repository testpypi dist/*
#     - pip install --index-url https://test.pypi.org/simple/ angreal
#     - echo "" > ~/.pypirc && rm ~/.pypirc
#   allow_failure: true
#   only:
#     - tags

# release:
#   image: python:3.6
#   stage: release
#   before_script:
#     - VERSION=`cat angreal/VERSION`
#     - if ! [[ "$CI_BUILD_TAG" = "$VERSION" ]]; then echo "$VERSION does not match $CI_BUILD_TAG"; exit -1 ; fi
#   script:
#     - pip install twine
#     - pip install .[dev]
#     - echo "[server-login]" >> ~/.pypirc
#     - echo "repository=https://pypi.python.org/pypi" >> ~/.pypirc
#     - echo "username="$PYPI_USER >> ~/.pypirc
#     - echo "password="$PYPI_PASSWORD >> ~/.pypirc
#     - python setup.py check sdist bdist_wheel
#     - twine upload --repository pypi dist/*
#     - echo "" > ~/.pypirc && rm ~/.pypirc
#   only:
#     - tags
#   when:
#     manual

# cleanup_release:
#   stage: release
#   when: always
#   script:
#     - rm -vf ~/.pypirc
#   only:
#     - tags

# trigger_docs:
#   stage: pages
#   variables:
#     APP_PROJECT_ID : 12432876
#   before_script:
#     - echo "No need to setup"
#   script:
#     - curl --request POST --form "token=$GITLAB_TRIGGER_TOKEN" --form ref=master https://gitlab.com/api/v4/projects/$APP_PROJECT_ID/trigger/pipeline
#   only:
#     - master



